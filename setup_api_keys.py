#!/usr/bin/env python3
"""
API Key Setup Script for Wildfire Risk Prediction System

This script helps you configure API keys for real data integration.
Run this script to set up your environment variables.
"""

import os
import sys
import getpass
from pathlib import Path

def setup_openweather_api():
    """Set up OpenWeather API key."""
    print("\n🌤️  OpenWeather API Setup (FREE)")
    print("=" * 50)
    print("1. Go to: https://openweathermap.org/api")
    print("2. Sign up for a free account")
    print("3. Go to 'My API keys' section")
    print("4. Copy your API key")
    
    api_key = input("\nEnter your OpenWeather API key: ").strip()
    
    if api_key and api_key != "your_api_key_here":
        # Set environment variable
        os.environ['OPENWEATHER_API_KEY'] = api_key
        print("✅ OpenWeather API key configured successfully!")
        return True
    else:
        print("⚠️  No valid API key provided. Weather data will use demo data.")
        return False

def setup_google_earth_engine():
    """Set up Google Earth Engine credentials."""
    print("\n🛰️  Google Earth Engine Setup (FREE for Research)")
    print("=" * 50)
    print("1. Go to: https://earthengine.google.com/")
    print("2. Click 'Sign Up' and request access")
    print("3. Wait for approval (24-48 hours)")
    print("4. After approval, run: earthengine authenticate")
    
    setup_choice = input("\nHave you already set up Google Earth Engine? (y/n): ").strip().lower()
    
    if setup_choice == 'y':
        try:
            import ee
            print("✅ Google Earth Engine is available!")
            return True
        except ImportError:
            print("❌ Google Earth Engine not available. Run: pip install earthengine-api")
            return False
    else:
        print("⚠️  Google Earth Engine not configured. Satellite data will use demo data.")
        return False

def setup_neon_api():
    """Set up NEON API token."""
    print("\n🌿 NEON Data Access Setup (Optional)")
    print("=" * 50)
    print("1. Visit: https://data.neonscience.org/")
    print("2. Create an account")
    print("3. Get your API token")
    
    api_token = input("\nEnter your NEON API token (or press Enter to skip): ").strip()
    
    if api_token:
        os.environ['NEON_API_TOKEN'] = api_token
        print("✅ NEON API token configured successfully!")
        return True
    else:
        print("⚠️  NEON API token not provided. Ecological data will use demo data.")
        return False

def create_env_file():
    """Create a .env file with the configured API keys."""
    env_content = f"""# Environment Variables for Wildfire Risk Prediction System
# Generated by setup_api_keys.py

# Weather Data API
OPENWEATHER_API_KEY={os.environ.get('OPENWEATHER_API_KEY', '')}

# NEON Data Access
NEON_API_TOKEN={os.environ.get('NEON_API_TOKEN', '')}

# Google Earth Engine (configure manually after approval)
# GOOGLE_EARTH_ENGINE_CREDENTIALS=path/to/your/credentials.json

# API Configuration
API_HOST=0.0.0.0
API_PORT=8000
API_WORKERS=4
API_DEBUG=false

# Dashboard Configuration
DASHBOARD_HOST=0.0.0.0
DASHBOARD_PORT=8050
DASHBOARD_DEBUG=true

# Cache Configuration
CACHE_TTL=3600
CACHE_MAX_SIZE=10000

# Logging
LOG_LEVEL=INFO
LOG_FILE=wildfire_risk.log
"""
    
    env_file = Path('.env')
    with open(env_file, 'w') as f:
        f.write(env_content)
    
    print(f"\n✅ Environment file created: {env_file.absolute()}")

def test_configuration():
    """Test the configuration to ensure everything works."""
    print("\n🧪 Testing Configuration")
    print("=" * 50)
    
    # Test OpenWeather API
    if os.environ.get('OPENWEATHER_API_KEY'):
        print("✅ OpenWeather API key: Configured")
    else:
        print("❌ OpenWeather API key: Not configured")
    
    # Test Google Earth Engine
    try:
        import ee
        print("✅ Google Earth Engine: Available")
    except ImportError:
        print("❌ Google Earth Engine: Not available")
    
    # Test NEON API
    if os.environ.get('NEON_API_TOKEN'):
        print("✅ NEON API token: Configured")
    else:
        print("❌ NEON API token: Not configured")
    
    # Test data integration
    try:
        from src.dashboard.data_integration import RealDataIntegration
        from config import get_config
        
        config = get_config()
        di = RealDataIntegration(config)
        
        # Test a simple risk calculation
        risk_data = di.calculate_comprehensive_risk(37.7749, -122.4194)
        print(f"✅ Data Integration: Working (Test risk: {risk_data['total_risk']:.1f})")
        
    except Exception as e:
        print(f"❌ Data Integration: Error - {e}")

def main():
    """Main setup function."""
    print("🚀 Wildfire Risk Prediction System - API Key Setup")
    print("=" * 60)
    print("This script will help you configure API keys for real data integration.")
    print("You can skip any API setup and use demo data instead.")
    
    # Setup each API
    openweather_configured = setup_openweather_api()
    earth_engine_configured = setup_google_earth_engine()
    neon_configured = setup_neon_api()
    
    # Create environment file
    create_env_file()
    
    # Test configuration
    test_configuration()
    
    # Summary
    print("\n📋 Setup Summary")
    print("=" * 50)
    print(f"OpenWeather API: {'✅ Configured' if openweather_configured else '❌ Not configured'}")
    print(f"Google Earth Engine: {'✅ Available' if earth_engine_configured else '❌ Not available'}")
    print(f"NEON API: {'✅ Configured' if neon_configured else '❌ Not configured'}")
    
    if openweather_configured or earth_engine_configured or neon_configured:
        print("\n🎉 Great! You have real data sources configured.")
        print("Your dashboard will now use real environmental data!")
    else:
        print("\n⚠️  No real data sources configured.")
        print("Your dashboard will use realistic demo data based on California patterns.")
    
    print("\n🚀 Next steps:")
    print("1. Start the dashboard: python run_dashboard.py")
    print("2. Open: http://localhost:8050")
    print("3. Explore the real-time environmental monitoring!")
    
    # Instructions for permanent setup
    print("\n💡 For permanent setup (Windows):")
    print("1. Open System Properties > Environment Variables")
    print("2. Add your API keys as user variables")
    print("3. Restart your terminal/IDE")
    
    print("\n💡 For permanent setup (Linux/Mac):")
    print("1. Add to ~/.bashrc or ~/.zshrc:")
    print("   export OPENWEATHER_API_KEY='your_key_here'")
    print("2. Run: source ~/.bashrc")

if __name__ == "__main__":
    main()
